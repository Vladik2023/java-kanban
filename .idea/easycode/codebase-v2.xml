<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="com.obiscr.chatgpt.settings.EasyCodeState">
    <option name="projectFiles" value="$PROJECT_DIR$/src/http/EndPoints.java;C:/Users/vladb/IdeaProjects/java-kanban/src/http/HttpTaskManager.java;C:/Users/vladb/IdeaProjects/java-kanban/src/http/HttpTaskServer.java;C:/Users/vladb/IdeaProjects/java-kanban/src/http/KVServer.java;C:/Users/vladb/IdeaProjects/java-kanban/src/http/KVTaskClient.java;C:/Users/vladb/IdeaProjects/java-kanban/src/http/LocalDateTimeAdapter.java;C:/Users/vladb/IdeaProjects/java-kanban/src/http/RequestFailedException.java;C:/Users/vladb/IdeaProjects/java-kanban/src/service/CSVFormatHandler.java;C:/Users/vladb/IdeaProjects/java-kanban/src/service/FileBackendTaskManager.java;C:/Users/vladb/IdeaProjects/java-kanban/src/service/HistoryManager.java;C:/Users/vladb/IdeaProjects/java-kanban/src/service/InMemoryHistoryManager.java;C:/Users/vladb/IdeaProjects/java-kanban/src/service/InMemoryTaskManager.java;C:/Users/vladb/IdeaProjects/java-kanban/src/service/Manager.java;C:/Users/vladb/IdeaProjects/java-kanban/src/service/TaskManager.java;C:/Users/vladb/IdeaProjects/java-kanban/src/service/TaskType.java;C:/Users/vladb/IdeaProjects/java-kanban/src/task/Epic.java;C:/Users/vladb/IdeaProjects/java-kanban/src/task/SubTask.java;C:/Users/vladb/IdeaProjects/java-kanban/src/task/Task.java;C:/Users/vladb/IdeaProjects/java-kanban/src/test/EpicTest.java;C:/Users/vladb/IdeaProjects/java-kanban/src/test/FileBackendTaskManagerTest.java;C:/Users/vladb/IdeaProjects/java-kanban/src/test/HistoryManagerTest.java;C:/Users/vladb/IdeaProjects/java-kanban/src/test/HttpTaskServerTest.java;C:/Users/vladb/IdeaProjects/java-kanban/src/test/TaskManagerTest.java;C:/Users/vladb/IdeaProjects/java-kanban/src/Main.java;C:/Users/vladb/IdeaProjects/java-kanban/README.md" />
    <option name="forceFullIndex" value="false" />
    <option name="fileSummaryMaps" value="{&quot;C:/Users/vladb/IdeaProjects/java-kanban&quot;:&quot;{\&quot;/src/http/HttpTaskManager.java\&quot;:\&quot;This file defines an HttpTaskManager class that extends FileBackendTaskManager to provide a backend for managing tasks, epics, subtasks and history using a remote HTTP client instead of local files.\\n\\nKey functions:\\n\\n- save() - Saves all tasks, epics, subtasks and history IDs to the remote HTTP client.\\n\\n- load() - Loads all tasks, epics, subtasks and history IDs from the remote HTTP client and populates the local storage. \\n\\n- findTask() - Helper method to lookup a task by ID across all local storages.\\n\\nThe main differences from FileBackendTaskManager are:\\n\\n- It uses a KVTaskClient to make HTTP requests to save/load data instead of using local files.\\n\\n- The data is serialized/deserialized to JSON using Gson before sending/receiving from the remote client.\\n\\nSo in summary, it provides the same task management functionality but with a remote HTTP backend instead of local file storage.\&quot;,\&quot;/src/service/FileBackendTaskManager.java\&quot;:\&quot;This FileBackendTaskManager class extends the InMemoryTaskManager class and adds functionality to persist task data to a file.\\n\\nKey functions:\\n\\n- save() - Writes all task, epic and subtask data to a file in CSV format. Also writes the task history.\\n\\n- loadFromFile(File file) - Static method that loads all data from a CSV file back into the task manager. Parses each line and recreates the task objects.\\n\\n- addTaskToStorage() - Helper method to add a task to the appropriate storage map.\\n\\n- addHistoryToManager() - Helper to add task IDs from the file to the history manager. \\n\\n- Overrides all task CRUD methods from the base class - Each override saves after the operation so changes are persisted to file.\\n\\nThis allows the in-memory task manager to now save its data to and load from a CSV file, acting as a file-based backend. This persists the task data even if the application restarts. The key functionality is reading/writing the CSV format and tying the file I/O to the base task manager methods.\&quot;,\&quot;/src/task/Epic.java\&quot;:\&quot;This file defines an Epic class that represents an epic task in the task management system.\\n\\nKey points:\\n\\n- Epic extends the base Task class and sets its type to TaskType.EPIC\\n- It has fields to store the duration, start and end times of the epic\\n- It has a list to store IDs of subtasks that are part of the epic\\n- Constructors to initialize the epic with/without duration and start time\\n- Getters and setters for the epic fields\\n- A addSubtaskId method to add subtask IDs to the list\\n- Overrides the toString method to print details of the epic\\n\\nKey functions:\\n\\n- Constructors to initialize an epic\\n- Getters and setters for duration, start/end times, subtask IDs \\n- addSubtaskId to add subtasks to the epic\\n- toString to print details of the epic object\\n\\nSo in summary, this class models an epic task that can have subtasks and duration, and provides methods to work with those properties.\&quot;,\&quot;/src/test/EpicTest.java\&quot;:\&quot;This Java file contains JUnit tests for the Epic class.\\n\\nKey things it does:\\n\\n- Imports the necessary classes like Epic, SubTask, TaskManager etc.\\n\\n- Uses the @Test annotation to mark test methods \\n\\n- Initializes a TaskManager using Manager.getTaskDefault()\\n\\n- Creates Epic and SubTask objects and persists them using the TaskManager\\n\\n- Sets different status combinations on the SubTasks\\n\\n- Calls epic.getStatus() to calculate the status \\n\\n- Asserts that the returned status matches the expected status based on the SubTask statuses\\n\\nThe key functions are:\\n\\n1. testCalculateStatus_emptySubTaskList() - Tests status is NEW when no SubTasks\\n\\n2. testCalculateStatus_allSubTasksDone() - Tests status is DONE when all SubTasks are DONE \\n\\n3. testCalculateStatus_subTasksNewAndDone() - Tests status is IN_PROGRESS when some SubTasks are NEW and others DONE\\n\\n4. testCalculateStatus_subTasksInProgress() - Tests status is IN_PROGRESS when all SubTasks are IN_PROGRESS\\n\\nSo in summary, it tests the logic to calculate the Epic status based on the statuses of its associated SubTasks.\&quot;,\&quot;/src/http/HttpTaskServer.java\&quot;:\&quot;This file implements an HTTP server for managing tasks using a REST API.\\n\\nKey functions:\\n\\n- handleTask - Handles incoming HTTP requests and dispatches them based on the endpoint and HTTP method. Calls the appropriate methods on the task manager to get, create, update or delete tasks.\\n\\n- getEndPoint - Parses the request URI and method to determine which endpoint is being called. Matches patterns to route to the correct endpoint enum value. \\n\\n- parsePathId - Parses the ID parameter from the request path.\\n\\n- sendText - Sends a JSON response body to the client.\\n\\n- start - Starts the HTTP server listening on the configured port. \\n\\n- stop - Stops the HTTP server.\\n\\nThe main responsibilities of this class are:\\n\\n- Starting an HTTP server on a port \\n- Mapping HTTP requests to task manager methods via endpoints\\n- Parsing request parameters like IDs\\n- Serializing responses to JSON\\n- Handling the request/response lifecycle\\n\\nSo in summary, it provides a REST API interface for a task management backend via an HTTP server.\&quot;,\&quot;/src/service/TaskManager.java\&quot;:\&quot;This file defines an interface called TaskManager.\\n\\nAn interface in Java defines the signatures of methods that classes implementing the interface must define. It does not provide implementations of those methods.\\n\\nThe TaskManager interface defines methods for managing different types of tasks - Tasks, Epics, and SubTasks.\\n\\nKey functions defined in the TaskManager interface:\\n\\n- createTask, createEpic, createSubTask - Methods to create new task objects and save them.\\n\\n- getSubTaskByEpic - Get all subtasks associated with a specific epic. \\n\\n- getTaskById, getEpicById, getSubTaskById - Get a task by its ID.\\n\\n- getAllTasks, getAllEpic, getAllSubTask - Get all tasks, epics, subtasks.\\n\\n- getHistory - Get a list of all tasks.\\n\\n- updateTask, updateEpic, updateSubTask - Update existing task objects. \\n\\n- deleteTaskById, deleteEpicById, deleteSubTaskById - Delete tasks by ID.\\n\\n- deleteAllTask, deleteAllEpic, deleteAllSubTask - Delete all tasks/epics/subtasks.\\n\\nSo in summary, this interface defines the contract for a service that can manage the full lifecycle of different task objects like creating, retrieving, updating and deleting them. Classes that implement this interface must provide implementations of all these methods.\&quot;,\&quot;/src/service/InMemoryTaskManager.java\&quot;:\&quot;This file defines an InMemoryTaskManager class that implements the TaskManager interface. It is used to manage tasks, epics and subtasks in memory without persisting to a database.\\n\\nKey functions:\\n\\n- createTask, createEpic, createSubTask - Create new tasks, epics and subtasks and store them in memory maps.\\n\\n- getTaskById, getEpicById, getSubTaskById - Get a task, epic or subtask by ID from the memory maps. \\n\\n- getAllTasks, getAllEpic, getAllSubTask - Get all tasks, epics and subtasks.\\n\\n- updateTask, updateEpic, updateSubTask - Update an existing task, epic or subtask in memory.\\n\\n- deleteTaskById, deleteEpicById, deleteSubTaskById - Delete a task, epic or subtask by ID. \\n\\n- deleteAllTask, deleteAllEpic, deleteAllSubTask - Delete all tasks, epics or subtasks.\\n\\n- getHistory - Get a list of all tasks accessed from the history manager.\\n\\n- getPrioritizedTasks - Get a sorted list of all tasks based on start time.\\n\\nIt stores the tasks, epics and subtasks in memory maps and handles all the CRUD operations and relationships between them in memory without persisting to a database.\&quot;,\&quot;/src/service/Manager.java\&quot;:\&quot;This Manager.java file is providing static factory methods to get default implementations of various manager classes.\\n\\nKey functions:\\n\\n- getDefault(String url) - Returns a default HttpTaskManager implementation initialized with the given URL. This is used to manage HTTP tasks.\\n\\n- getFileBackendTaskManagerDefault() - Returns a default FileBackendTaskManager implementation. This is used to manage tasks that interact with the file system backend. \\n\\n- getTaskDefault() - Returns a default InMemoryTaskManager implementation. This is used to manage tasks in memory.\\n\\n- getHistoryDefault() - Returns a default InMemoryHistoryManager implementation. This is used to manage task history in memory.\\n\\n- getGson() - Returns a Gson instance configured to serialize/deserialize LocalDateTime objects. Gson is used for JSON serialization.\\n\\nSo in summary, it provides static factory methods to get default implementations of various manager classes needed to manage tasks, history, HTTP communication, and file system interactions in a standardized way. This centralizes object creation and allows switching implementations easily.\&quot;,\&quot;/src/task/Task.java\&quot;:\&quot;This Java file defines a Task class that represents a task or job that needs to be done.\\n\\nKey things:\\n\\n- It defines fields like id, name, description, status, type, duration, start time to represent properties of a task.\\n\\n- It has constructors to initialize a task with different parameters. \\n\\n- Getter and setter methods to access/update the field values.\\n\\n- A generateId() method to generate a unique id for each task.\\n\\n- Methods to calculate end time based on start time and duration. \\n\\n- toString() method to print the task details.\\n\\n- equals() and hashCode() methods to check equality and generate hash for tasks.\\n\\nKey functions:\\n\\n- Constructors - To initialize a task \\n- Getters/setters - To access/update field values\\n- generateId() - To generate unique id\\n- getEndTime() - To calculate end time from start and duration\\n- toString() - To print task details\\n- equals()/hashCode() - For equality check and hashing\\n\\nSo in summary, it defines a Task class/object with properties and methods to represent, initialize, access/update tasks and check equality between tasks.\&quot;,\&quot;/src/service/HistoryManager.java\&quot;:\&quot;This file defines an interface called HistoryManager for managing task history.\\n\\nSome key points:\\n\\n- It is located in the service package, indicating it provides a service/functionality to other parts of the application.\\n\\n- It does not implement any concrete classes, it only defines the interface. This allows other classes to implement this interface and provide the actual history management logic.\\n\\n- The interface defines 3 methods:\\n  - getHistory(): Returns the list of all historical tasks\\n  - addTask(Task task): Adds a new task to the history\\n  - remove(int id): Removes a task from history by ID\\n\\n- getHistory() allows other parts of the app to retrieve the full task history list. \\n\\n- addTask() and remove() provide ways to update the history by adding/removing tasks.\\n\\nSo in summary, this interface defines the contract/API for retrieving and modifying task history that can be implemented by different classes to provide the actual history management functionality. Other parts of the app can depend on this interface without knowing the actual implementation.\&quot;,\&quot;/src/test/HttpTaskServerTest.java\&quot;:\&quot;This file contains unit tests for the HttpTaskServer class.\\n\\nThe key things it does:\\n\\n- Sets up a KVServer and HttpTaskServer to test against\\n- Creates sample task data in the backend manager \\n- Defines HTTP request preparation methods\\n- Contains unit tests for:\\n  - GET, DELETE, POST requests to different endpoints\\n  - Retrieving all tasks, by id, filtering etc\\n  - Creating, updating, deleting tasks, epics, subtasks\\n  - Checking response codes and payload contents\\n  - Testing invalid URI\\n\\nThe main functions tested are:\\n\\n- Retrieving and managing tasks, epics, subtasks via the HTTP API\\n- Creating, updating, deleting records \\n- Checking response codes and payloads match expectations\\n- Ensuring the server handles invalid requests correctly\\n\\nSo in summary, it provides a comprehensive set of unit tests to validate the core CRUD functionality and error handling of the HttpTaskServer class against the backend task manager.\&quot;,\&quot;/src/service/TaskType.java\&quot;:\&quot;This Java file defines an enum called TaskType.\\n\\nAn enum in Java is a special type that represents a fixed set of constants. Here are the key things it does:\\n\\n- Defines three possible task types as enum constants - TASK, EPIC, SUBTASK\\n\\n- TaskType is a public enum, so these constants can be accessed from other classes\\n\\n- No methods or fields are defined, enums are essentially constant values \\n\\n- Allows code to represent a task as being one of these predefined types rather than as a string or int\\n\\n- Provides type safety - a TaskType variable can only hold one of the enum values\\n\\n- Easy to extend if more task types need to be added in the future\\n\\nSo in summary:\\n\\n- Defines a set of possible task types as enum constants \\n- Makes these types accessible to other classes\\n- Provides type safety for representing task types\\n- Simple fixed set of options rather than strings/ints\\n- Easy to extend if more types need to be added\\n\\nThe key function is to represent a fixed set of task types that code can reference in a type-safe way. No other methods are needed since enums are just constant values.\&quot;,\&quot;/src/service/CSVFormatHandler.java\&quot;:\&quot;This Java file contains a CSVFormatHandler class that handles converting Task objects to and from CSV string format.\\n\\nThe key functions are:\\n\\n- toString(Task task) - Converts a Task object to a CSV string format\\n- fromString(String value) - Converts a CSV string back to a Task object \\n- historyFromString(String value) - Converts a CSV string to a List of task IDs\\n- historyToString(List\\u003cInteger\\u003e history) - Converts a list of task IDs to a CSV string\\n- getHeader() - Returns the header string for the CSV columns\\n\\nThe toString and fromString methods handle the main conversion between Task objects and CSV strings. They handle different Task types like Epic, Subtask etc and parse/format the relevant fields. \\n\\nThe history methods handle converting a list of task IDs to/from a CSV string, used likely for task relationships or history.\\n\\nThe getHeader method returns the column names for the CSV, useful for file headers.\\n\\nOverall this class provides utilities to serialize Task objects and their relationships to CSV format for storage/export purposes in a consistent manner.\&quot;,\&quot;/src/test/FileBackendTaskManagerTest.java\&quot;:\&quot;This file contains unit tests for the FileBackendTaskManager class.\\n\\nKey things it does:\\n\\n- Sets up a FileBackendTaskManager instance for each test using the createTaskManager() method.\\n\\n- Creates test data like tasks, epics to pass to the FileBackendTaskManager methods. \\n\\n- Tests saving and loading tasks/epics from a file:\\n\\n  - Saves data, loads from file, checks loaded data matches saved\\n\\n  - Tests empty file, empty lists, epics without subtasks\\n\\n- Tests specific FileBackendTaskManager methods:\\n\\n  - getAllTasks() \\n  - createTask()\\n  - getAllEpic()\\n  - getHistory()\\n\\n- Uses JUnit assertions like assertNotNull, assertEquals to validate test outcomes.\\n\\nSo in summary, it is testing the core save/load functionality of FileBackendTaskManager by:\\n\\n- Creating sample data\\n- Calling relevant methods \\n- Saving/loading from file\\n- Validating loaded data matches what was saved\\n\\nThis helps ensure the file I/O and data handling of FileBackendTaskManager works as expected.\&quot;,\&quot;/src/http/RequestFailedException.java\&quot;:\&quot;This Java file defines a RequestFailedException class that extends the RuntimeException class.\\n\\nKey things:\\n\\n- It is defining a custom exception class called RequestFailedException\\n- This exception will be thrown when an HTTP request fails \\n- It extends RuntimeException, so it is an unchecked exception that does not need to be declared in method signatures\\n- It has a constructor that takes a String message and passes it to the parent RuntimeException constructor\\n\\nKey functions:\\n\\n- Constructor - public RequestFailedException(String message) - Creates a new exception with the given error message\\n- Inherits all functions from RuntimeException like getMessage(), printStackTrace() etc. to handle the exception\\n\\nIn summary, this exception class is used to indicate and handle failures that occur when making HTTP requests. It allows customizing the exception with a message and integrates with Java\\u0027s exception handling mechanism by extending RuntimeException. Instances of this class would be thrown when a request fails to indicate the error.\&quot;,\&quot;/src/task/SubTask.java\&quot;:\&quot;This file defines a SubTask class that represents a sub-task in a task management system.\\n\\nKey points:\\n\\n- SubTask extends the base Task class, inheriting common task properties like name, description, duration, start time etc. \\n\\n- It adds an epicId property to link the sub-task to a parent epic/story.\\n\\n- There are two constructors - one that initializes all properties, and one that only initializes name, description and epicId.\\n\\n- getEpicId() and setEpicId() methods to access/update the epicId.\\n\\n- toString() overrides the base class method to include epicId in the string representation of the object. \\n\\n- The type property is set to TaskType.SUBTASK to identify it as a sub-task.\\n\\nKey functions:\\n\\n- Constructors to initialize a new SubTask object\\n- getEpicId() and setEpicId() to manage the link to the parent epic\\n- toString() to get a string representation including epicId\\n- It extends the base Task class to inherit common task properties\\n\\nSo in summary, it defines a SubTask entity that links to an epic and extends the base Task functionality.\&quot;,\&quot;/src/service/InMemoryHistoryManager.java\&quot;:\&quot;This file implements an in-memory history manager for tasks.\\n\\nKey functions:\\n\\n- getHistory() - Returns a list of all tasks in the history\\n\\n- addTask(Task task) - Adds a new task to the history. Checks if the task already exists and removes it before adding. \\n\\n- remove(int id) - Removes the task with the given ID from the history\\n\\n- CustomLinkedList - Inner class that implements a doubly linked list to store the task history\\n  - linkFirst(Task task) - Adds a new task to the front of the list\\n  - getTasks() - Returns all tasks in the list\\n  - increaseSize() - Increments the size counter\\n  - trimToSize() - Trims the list to max size HISTORY_SIZE by removing tasks from the back\\n\\n- taskMap - HashMap that maps task IDs to their nodes in the linked list, for quick lookups when removing tasks\\n\\nSo in summary, it uses a doubly linked list and hashmap to implement an in-memory FIFO cache of the most recent tasks, with methods to add, retrieve, and remove tasks from the history.\&quot;,\&quot;/src/http/LocalDateTimeAdapter.java\&quot;:\&quot;This file defines a LocalDateTimeAdapter class that allows Gson to serialize and deserialize LocalDateTime objects to/from JSON.\\n\\nKey functions:\\n\\n- serialize() - Implements JsonSerializer interface. Takes a LocalDateTime object and returns a JsonElement by formatting it to a string using the ISO_DATE_TIME formatter. This allows LocalDateTime to be converted to JSON.\\n\\n- deserialize() - Implements JsonDeserializer interface. Takes a JsonElement (parsed from JSON) and returns a LocalDateTime by parsing the string value using the ISO_DATE_TIME formatter. This allows JSON to be converted to a LocalDateTime object. \\n\\nSo in summary, this adapter allows Gson to seamlessly convert between LocalDateTime objects and their JSON representation when encoding to and decoding from JSON. This avoids issues with LocalDateTime not having a default JSON representation.\&quot;,\&quot;/src/test/TaskManagerTest.java\&quot;:\&quot;This file defines unit tests for a TaskManager class.\\n\\nKey things it does:\\n\\n- Defines an abstract TaskManagerTest class that all task manager test classes will extend from. This sets up common test functionality.\\n\\n- The abstract class defines test methods for all the core task manager operations like create, get, update, delete tasks/epics/subtasks.\\n\\n- It has an abstract createTaskManager() method that concrete subclasses must implement to return the specific task manager implementation to test.\\n\\n- One concrete subclass InMemoryTaskManagerTest is defined that returns an InMemoryTaskManager for testing.\\n\\n- The tests validate that each operation works as expected - tasks are created and retrieved correctly, updates are persisted, deletes remove items etc. \\n\\n- It also tests invalid/edge cases like getting items with invalid IDs, empty result lists etc.\\n\\n- Running this test class will execute all the test methods, exercising the full functionality of the task manager and ensuring it works correctly.\\n\\nSo in summary, it defines a comprehensive set of unit tests for the core operations of a generic TaskManager interface using JUnit. This allows testing different implementations in a standardized way.\&quot;,\&quot;/src/http/KVTaskClient.java\&quot;:\&quot;This Java file defines a KVTaskClient class that provides functions to interact with a key-value storage API.\\n\\nThe key functions are:\\n\\n- Constructor - Initializes the client with the base URL and gets an API token by calling the /register endpoint.\\n\\n- save() - Makes a POST request to the /save/{key} endpoint to save a key-value pair, passing the API token.\\n\\n- load() - Makes a GET request to the /load/{key} endpoint to load a value by key, passing the API token. \\n\\n- register() - Private method that makes the initial GET request to /register to retrieve an API token.\\n\\nSo in summary, it provides a client class to:\\n\\n1. Authenticate and get an API token\\n2. Save key-value pairs \\n3. Load values by key\\n\\nBy abstracting the HTTP requests and error handling, it allows other code to easily interact with the key-value storage API.\&quot;,\&quot;/src/http/KVServer.java\&quot;:\&quot;This Java file implements a simple key-value store HTTP server.\\n\\nThe key functions are:\\n\\n- KVServer() constructor - Initializes the HTTP server on port 8080 and registers request handlers.\\n\\n- main() - Starts the server. \\n\\n- register() - Handles /register requests, returns the API token. \\n\\n- save() - Handles /save requests, saves a key-value pair to the data map. \\n\\n- load() - Handles /load requests, loads a value from the data map by key.\\n\\n- start() - Starts the HTTP server listening on the configured port.\\n\\n- stop() - Stops the HTTP server. \\n\\n- generateApiToken() - Generates a random API token string.\\n\\n- hasAuth() - Checks if the request contains a valid API token.\\n\\n- readText() - Reads the request body as a string. \\n\\n- sendText() - Sends a response with the given text.\\n\\nSo in summary, it implements a basic key-value HTTP REST API server to store, retrieve and register API tokens for accessing the data.\&quot;,\&quot;/src/http/EndPoints.java\&quot;:\&quot;This EndPoints.java file defines an enum that lists all the possible HTTP endpoints for a task/epic/subtask management API.\\n\\nSome key things:\\n\\n- EndPoints is an enum, so it defines a fixed set of endpoint names that can be used.\\n\\n- The enum values list all the different HTTP methods (GET, POST, DELETE etc) and resources (tasks, epics, subtasks) that the API supports.\\n\\n- This allows the API code to refer to endpoints by name (e.g. EndPoints.GET_TASKS) rather than hardcoding strings. This makes the code more readable and maintainable. \\n\\n- New endpoints can be added by defining a new enum value, without changing any other code that uses the enum.\\n\\n- Client code that uses the API can also refer to endpoints by the enum rather than strings.\\n\\nKey functions:\\n\\n- Defines all supported API endpoints in a central place\\n- Provides type-safety by using an enum rather than strings \\n- Allows easy addition of new endpoints without changing other code\\n- Makes endpoint references self-documenting in code\\n\\nSo in summary, it centrally defines all the valid endpoints for the API in a maintainable way using an enum.\&quot;,\&quot;/src/Main.java\&quot;:\&quot;This Main.java file is the entry point of the application. It does the following:\\n\\n1. Imports the Manager class from the service package to get the default TaskManager instance.\\n\\n2. Imports the TaskManager interface from the service package. \\n\\n3. Imports the Epic class from the task package.\\n\\n4. Defines a main method that:\\n\\n   - Gets the default TaskManager instance from Manager\\n   - Creates a new Epic object\\n   - Calls createEpic on the TaskManager to add the epic\\n   - Calls getEpicById to retrieve the epic\\n   - Prints the history of operations on the TaskManager\\n\\nThe key functions it uses are:\\n\\n- Manager.getTaskDefault() - Gets the default TaskManager instance \\n- taskManager.createEpic() - Adds a new epic to the TaskManager\\n- taskManager.getEpicById() - Retrieves an epic by id\\n- taskManager.getHistory() - Gets the history of operations on the TaskManager\\n\\nSo in summary, it demonstrates basic CRUD operations on epics using the TaskManager interface and prints the history.\&quot;,\&quot;/README.md\&quot;:\&quot;The README.md file is used to provide information about a project. Some key things it does and functions include:\\n\\n- Project Description - Provides a brief overview of what the project is about and its purpose.\\n\\n- Installation Instructions - Explains how to set up and install the project locally if needed. This could include dependencies, configuration steps, etc. \\n\\n- Usage Instructions - Outlines how to use or run the project after installation. Things like running tests, starting the application, etc.\\n\\n- Documentation - Links to or embeds additional documentation about the project like API documentation. \\n\\n- Contributing Guidelines - Lays out how others can contribute to the project through things like coding style, submitting issues/pull requests, etc. \\n\\n- License Information - Specifies the license under which the project is distributed, usually included near the top. \\n\\n- Contact Information - Provides ways to get in touch with the maintainers of the project like email or social media links.\\n\\n- Changelog - Keeps track of updates and changes made in each version of the project.\\n\\nSo in summary, the README provides important metadata about the project to help users and contributors understand its purpose and get started interacting with it quickly. It\\u0027s generally the first file people will see when encountering a new project.\&quot;,\&quot;/src/test/HistoryManagerTest.java\&quot;:\&quot;This file contains JUnit tests for the HistoryManager class.\\n\\nKey functions:\\n\\n- setUp() - Initializes the HistoryManager instance to test against\\n\\n- testGetHistoryWithEmptyList() - Tests getting an empty history list when no tasks have been added\\n\\n- testAddTaskToEmptyHistory() - Tests adding a single task to an empty history \\n\\n- testRemoveTaskFromEmptyHistory() - Tests removing a task from an empty history\\n\\n- testAddDuplicateTaskToHistory() - Tests adding a duplicate task only adds it once to the history\\n\\n- testRemoveTaskFromBeginningOfHistory() - Tests removing a task added at the beginning of the history\\n\\n- testRemoveTaskFromMiddleOfHistory() - Tests removing a task added in the middle of the history  \\n\\n- testRemoveTaskFromEndOfHistory() - Tests removing a task added at the end of the history\\n\\nThe key purpose is to test the basic CRUD (create, read, update, delete) operations on the HistoryManager class - adding, getting, and removing tasks from the history in different scenarios. This helps validate that the HistoryManager class is working as expected.\&quot;}&quot;}" />
  </component>
</project>